{"version":3,"sources":["images/header.png","images/icons/logo.png","components/Room/Room.js","components/Home/Home.js","components/Login/firebase.config.js","components/Login/Login.js","components/Book/Book.js","components/Header/Header.js","components/PrivateRoute/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","Room","room","classes","history","useNavigate","Card","className","CardHeader","Avatar","aria-label","title","CardMedia","image","imgUrl","src","bedType","alt","CardContent","Typography","variant","color","component","description","CardActions","disableSpacing","IconButton","bed","capacity","price","Button","onClick","Home","style","display","margin","justifyContent","map","key","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Login","useContext","UserContext","setLoggedInUser","from","useLocation","state","pathname","provider","initializeApp","GoogleAuthProvider","auth","getAuth","signInWithPopup","then","result","credentialFromResult","accessToken","user","displayName","email","name","replace","catch","error","code","message","credentialFromError","Book","useParams","textAlign","to","Header","backgroundImage","header","logo","PrivateRoute","children","rest","loggedInUser","render","location","createContext","App","useState","Provider","value","path","element","exact","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.450133c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.50ce2657.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5c655479.png\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport LocalHotelIcon from '@material-ui/icons/LocalHotel';\nimport WcIcon from '@material-ui/icons/Wc';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport { useNavigate } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nexport default function Room({room}){\n  const classes = useStyles();\n  let history = useNavigate()\n    const handleBook = (bedType) => {\n        history(`/book/${bedType}`);\n    }\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\n            {room.avatar}\n          </Avatar>\n        }\n        title={room.title}\n      />\n\n      <CardMedia\n        className={classes.media}\n        image={room.imgUrl}\n        title=\"Paella dish\"\n      />\n      <img src={`/images/${room.bedType}.png`} alt=\"\"/>\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {room.description}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <IconButton aria-label=\"add to favorites\">\n          <LocalHotelIcon />: {room.bed} \n        </IconButton>\n        <IconButton aria-label=\"share\">\n          <WcIcon />: {room.capacity} \n        </IconButton>\n        <IconButton aria-label=\"price\">\n          <AttachMoneyIcon />: {room.price} \n        </IconButton>\n        <Button onClick={() => handleBook(room.bedType)} variant=\"contained\" color=\"primary\">\n            Book\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from 'react';\nimport Room from '../Room/Room';\n\nconst Home = () => {\n    const style = {\n        display: 'flex',\n        margin: '40px',\n        justifyContent: 'space-between'\n    }\n    const rooms = [\n        {\n            title: 'Standard Single Room',\n            description: 'Standard Single Rooms are designed in open -concept living area and have many facilities.',\n            imgUrl: 'https://cdn.jumeirah.com/-/mediadh/dh/hospitality/jumeirah/offers/offer-images/burj-al-arab-presidential-suite-living-room-4-hero.jpg',\n            bed: 1,\n            capacity: 1,\n            bedType: 'Single',\n            avatar: 'S',\n            price: 119\n        },\n        {\n            title: 'Couple Power Room',\n            description: 'Superior Double Rooms are perfectly equipped for traveling couples or friends.',\n            imgUrl: 'https://cdn.jumeirah.com/-/mediadh/dh/hospitality/jumeirah/offers/offer-images/burj-al-arab-royal-suite-staircase-5-hero.jpg',\n            bed: 1,\n            capacity: 2,\n            bedType: 'Double',\n            avatar: 'D',\n            price: 149\n        },\n        {\n            title: 'Family Capacity Room',\n            description: ' Have lots of in-room facilities and are designed in open-concept living area.',\n            imgUrl: 'https://cdn.jumeirah.com/-/mediadh/dh/hospitality/jumeirah/hotels/dubai/burj-al-arab-jumeirah/room/presidential-two-bedroom-suite/burj-al-arab-presidential-suite-guest-bedroom_6-4_landscape/burj-al-arab-presidential-suite-guest-bedroom_16-9_landscape.jpg?w=2080',\n            bed: 2,\n            capacity: 4,\n            bedType: 'Family',\n            avatar: 'F',\n            price: 199\n        }\n    ]\n    return (\n        <div style={style}>\n            {\n                rooms.map(room => <Room key={room.bedType} room={room}></Room>)\n            }\n        </div>\n    );\n};\n\nexport default Home;","const firebaseConfig = {\r\n    apiKey: \"AIzaSyBPRYpUNEJ0kytC_4-f_QMrT8FhLu30Wss\",\r\n    authDomain: \"bruj-al-arab-4c6e7.firebaseapp.com\",\r\n    projectId: \"bruj-al-arab-4c6e7\",\r\n    storageBucket: \"bruj-al-arab-4c6e7.appspot.com\",\r\n    messagingSenderId: \"550528830766\",\r\n    appId: \"1:550528830766:web:1586f90a99852cf88d7ebf\"\r\n  };\r\n  export default firebaseConfig;","import React, { useContext } from 'react';\nimport { initializeApp } from 'firebase/app';\n// import  UserContext from '../../App';\nimport firebase from 'firebase/compat/app';\nimport \"firebase/compat/auth\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport firebaseConfig from './firebase.config';\nimport { UserContext } from '../../App';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n\n\nconst Login = () => {\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n    let history = useNavigate();\n    let location = useLocation();\n    const { from } = location.state || { from: { pathname: \"/\" } };\n    const app = initializeApp(firebaseConfig);\n    //  if(firebase.app.length === 0){\n    //     const app = initializeApp(firebaseConfig);\n    //  }\n    const provider = new GoogleAuthProvider();\n    const handleSignIn = () => {\n        const auth = getAuth();\n        signInWithPopup(auth, provider)\n            .then((result) => {\n                const credential = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential.accessToken;\n                const { displayName, email } = result.user;\n                const signedInUser = { name: displayName, email: email }\n                setLoggedInUser(signedInUser);\n                history.replace(from);\n            }).catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                const email = error.email;\n                const credential = GoogleAuthProvider.credentialFromError(error);\n            });\n    }\n\n    return (\n        <div>\n            <h1>This is Login</h1>\n            <button onClick={handleSignIn}>Google</button>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nconst Book = () => {\n    const {bedType} = useParams();\n    return (\n        <div style={{textAlign: 'center'}}>\n            <h1>Let's book a {bedType} Room.</h1>\n            <p>Want a <Link to=\"/home\">different room?</Link> </p>\n            \n        </div>\n    );\n};\n\nexport default Book;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport header from '../../images/header.png';\nimport logo from '../../images/icons/logo.png';\n\nconst Header = () => {\n    return (\n        <div style={{ backgroundImage: `linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ), url(${header})` }} className=\"header\">\n            <nav className=\"nav\">\n                <ul>\n                    <li>\n                        <img className=\"logo\" src={logo} alt=\"\"/>\n                    </li>\n                    <li>\n                        <Link to=\"/home\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/login\">Login</Link>\n                    </li>\n                    <li>\n                        <Link className=\"btn-book\" to=\"/book\">Book</Link>\n                    </li>\n                </ul>\n            </nav>\n            <div className=\"title-container\">\n                <h1>Burj Al Arab</h1>\n                <h2>A global icon of Arabian luxury</h2>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;","import React, { useContext } from 'react';\r\nimport { Route , Navigate } from 'react-router-dom';\r\nimport { UserContext } from '../../App';\r\n\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  \r\n    const [loggedInUser,setLoggedInUser] = useContext(UserContext)\r\n    return (\r\n        <Route\r\n        \r\n            {...rest}\r\n            render={({ location }) =>\r\n               loggedInUser.email ? (\r\n                    children\r\n                ) : (\r\n                    <Navigate\r\n                        to={{\r\n                            pathname: \"/login\",\r\n                            state: { from: location }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React, { createContext, useState } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Routes\n} from \"react-router-dom\";\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\nimport Book from './components/Book/Book';\nimport Header from './components/Header/Header';\nimport PrivateRoute from './components/PrivateRoute/PrivateRoute';\n\nexport const UserContext = createContext()\nfunction App() {\n  const [loggedInUser, setLoggedInUser] = useState({})\n  return (\n    <UserContext.Provider value={[loggedInUser, setLoggedInUser]}>\n      <p>Name: {loggedInUser.name}   </p>\n      <p>Gmail: {loggedInUser.email}   </p>\n      <BrowserRouter >\n        <Header />\n        <Routes>\n          <Route path=\"/home\" element={<Home />}>\n\n          </Route>\n          <Route path=\"/login\" element={<Login />}>\n          </Route>\n\n          <Route path=\"/book\" element={<Book />}>\n          </Route>\n       \n      \n\n          {/* for private route */}\n      \n          <Route element={<PrivateRoute path=\"/book/:bedType\" > <Book /> </PrivateRoute>}>\n\n          </Route>\n\n          <Route exact path=\"/\" element={<Home />} >\n\n          </Route>\n        </Routes>\n      </BrowserRouter>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}